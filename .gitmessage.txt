# feat: Summarize changes in around 50 characters or less
# 
# feat:   new feature for the user, not a new feature for build script
# fix:    bug fix for the user, not a fix to a build script
# docs:   changes to the documentation
# style:  formatting, missing semi colons, etc; no production code change
# refactor: refactoring production code, eg. renaming a variable
# test:   adding missing tests, refactoring tests; no production code change
# chore:  updating build tasks, package manager configs, etc; no production
#         code change
#
# <type>(<scope>): <subject>
#
# <body>
#
# <footer>
#
# Example <scope> values:
#   init
#   runner
#   watcher
#   config
#   web-server
#   proxy
#   etc.
#
# The <scope> can be empty (e.g. if the change is a global or difficult
# to assign to a single component), in which case the parentheses are
# omitted. In smaller projects such as plugins, the <scope> is empty.
#
# More detailed explanatory text, if necessary. Wrap it to about 72
# characters or so. In some contexts, the first line is treated as the
# subject of the commit and the rest of the text as the body. The
# blank line separating the summary from the body is critical (unless
# you omit the body entirely); various tools like `log`, `shortlog`
# and `rebase` can get confused if you run the two together.
# 
# Explain the problem that this commit is solving. Focus on why you
# are making this change as opposed to how (the code explains that).
# Are there side effects or other unintuitive consequences of this
# change? Here's the place to explain them.
# 
# Further paragraphs come after blank lines.
# 
#  - Bullet points are okay, too
# 
#  - Typically a hyphen or asterisk is used for the bullet, preceded
#    by a single space, with blank lines in between, but conventions
#    vary here
# 
# If you use an issue tracker, put references to them at the bottom,
# like this:
# 
# Closes: #123, #234
# Resolves: #123
# See also: #456, #789